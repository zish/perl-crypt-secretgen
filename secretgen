#!/usr/bin/perl
use strict;
use Getopt::Long qw (:config auto_version gnu_compat);
use vars '$VERSION';
use lib $ENV{HOME} . '/git/secretgen';
use Crypt::SecretGen;

$VERSION = '0.01';

=head1 AUTHORS

Jeremy Melanson <jmelanson[at]systemhalted[dot]com>

=head1 COPYRIGHT

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License 3.0 (or higher, at your discretion).

=cut

main ();

sub main {
	my $opts;
	$opts->{length}	= 12;					#--- Default password length to 12 characters.
#	$opts->{rndsrc} = "/foo";	#--- Random number generation device source.
	$opts->{rndsrc} = "/dev/urandom";	#--- Random number generation device source.
	checkOpts ($opts);
	my $rnd = Crypt::SecretGen->new ($opts);

	my $secret =  $rnd->get_secret ();

	if ($rnd->high_error_level ()) {
		print STDERR "ENCOUNTERED ERROR(S):\n" . $rnd->errors_str . "\n";
	} else {
		print $secret . "\n";
	}
} # END sub main

#--- Check command line options. Populate provided hashref.
sub checkOpts {
	my $opts = $_[0];
	my $charLists = [];
	#--- If the last arg is numeric, see if it's supposed to be the password length.
	if ($ARGV[$#ARGV] =~ /^\d+/) {
		if (@ARGV > 1) { $opts->{length} = pop (@ARGV) if (!($ARGV[($#ARGV-1)] =~ /^-(l|len|c|chars)/)); }
		else { $opts->{length} = pop (@ARGV); }
	}
	$opts->{charlists}	= [];
	unless (GetOptions (
		'length|l=i'	=> \$opts->{length},				# Override default password length.
		'chars|c=s'		=> $opts->{charlists},			# Any provided character lists from cli.
		'rndsrc|s=s'	=> \$opts->{rndsrc},				# Random number generator source.
		'nodefault|x'	=> \$opts->{nodefault},			# Ignore 'default' character list.
		'help|h|?'		=> sub { use Pod::Usage; pod2usage (exitval=>0, -verbose=>1); },
	)) { use Pod::Usage; pod2usage (-exitval=>2, -verbose=>0, -output=>\*STDERR); };
} # END sub checkOpts

sub quit { my $msg = $_[0]; print STDERR $msg . "\n"; exit (1); } # END sub quit

__END__

=head1 NAME

secretgen - Generate a randonized password, using optional parameters for customization.

=head1 SYNOPSIS

secretgen [-c|--chars <list>] [-l|--length <length>] [ -s|--rndsrc <path> ][-x|--nodefault]

secretgen [-h] [-?] [--help]

=head1 OPTIONS

=over 8

=item B<-c list | --chars=list>

Specify one or more lists of valid characters for the generated password. Ranges can be specified by using the format 'a-z' or 'a..z'. The space or tab characters can be specified by surrounding the list in quotes. Set counts of particular characters can also be defined by prepending the list with '<number>:'.

By default, any added lists are used along with the default lists. Use the '--nodef' option to omit the default character lists, and only use those specified by the -c options.

The current default lists are 'a-z', 'A-Z' and '0-9'.

I<Additional information regarding Character List formatting can be found in the section L</Character List Syntax>.>

=item B<-h | --help>

Show this help text and exit.

=item B<-l | --length>

Specify the number of characters to return (length) for the generated password. The default length is 12 characters.

Entering '--length 5' will return a 5-character password string.

=item B<-s | --rndsrc>

Specify the path of a random number generator device or file. STDIN can be specified with '-'.

The default is '/dev/urandom'.

=item B<-x | --nodefault>

Ignore the 'default' character lists. This requires at least one defined --chars option.

=back

=head2 Character List Syntax

B<Some things to note regarding Character list syntax>

=over 4

=item Quoting character lists:

Using quotes is completely optional. Single or double quotes may be used around a character list if desired. They will not be incorporated into the list.

=over 4

secretgen -c "a-z"

secretgen -c 'a-z'

secretgen -c a-z

=back

=item Character ranges:

Ranges of characters can be declared, rather than passing individual character in a list. They can be specified using a hyphen or 2 periods.

=over 4

secretgen -c a-z

secretgen -c a..z

=back

=item Grouping character ranges:

Multiple ranges may be grouped in a single -c option or declared separately.

=over 4

secretgen -c a-zA-Z0-9

secretgen -c a-z -c A-Z -c 0-9

=back

=item Using special characters:

Hyphens may be used in character lists, by using a backslash or declaring it at the beginning or end of the list.

=over 4

secretgen -c a-z\-0-9

secretgen -c -a-z

secretgen -c a-z-

=back

Double-quotes may be used by using a backslash, or surrounding the list with single-quotes.

=over 4

secretgen -c a-z\"

secretgen -c "a-z\""

secretgen -c 'a-z"'

=back

Likewise, single-quotes may be used by using a backslash  or surrounding the list with double-quotes

=over 4

secretgen -c a-z\'

secretgen -c "a-z'"

=back

Depending on the command shell used (such as most *NIX shells, including bash, zsh, and many others), exclamation points may require a backslash, or otherwise declared in a single-quoted range.

=over 4

secretgen -c a-z\!

secretgen -c 'a-z!'

=back

A backslash may be used, but should either be double-escaped, or single-escaped if the list is surrounded with single-quotes.

=over 4

secretgen -c a-z\\\\

secretgen -c 'a-z\\'

=back

=head2 Usage Examples:

=over 8

=item Generate 8-character password, using the default character lists.

secretgen --length 8

=item Generate 12-character password (default), using only lower-case letters 'a' through 'z'.

secretgen --nodefault --chars a-z

=item Generate 128-bit hexadecimal number.

secretgen -nodefault -length=16 -chars='0-9a-f'

=item Generate 12-character password, containing three characters of either '#', '$', '%', '%', or '='.

secretgen -c "3:#$%="

=item Generate 25-character password, containing at least five digits, and at least 5 characters from the range !@#$%^&*()_\-=+ .

secretgen -length 25 -c "5:0-9" -c '5:!@#$%^&*()_\-=+' -c '!@#$%^&*()_\-=+'

=item Use the same constraints as the previous, but only use lower-case letters.

secretgen -length 25 -c "5:0-9" -c "5:\!@#$%^&*()_\-=+" -c "\!@#$%^&*()_\-=+" -c "a-z0-9" -nodefault

=item Use an external tool for generating random numbers.

external_random_gen | secretgen --rndsrc -

=item Use another random number source, other than /dev/urandom.

secretgen --rndsrc /dev/ttyS0

secretgen --rndsrc /path/to/readable/socket/or/character_device

=item Use a bash shell script to generate a UUID.

echo "$(secretgen -x -l 8 -c 0-9a-f)-$(secretgen -x -l 4 -c 0-9a-f)-$(secretgen -x -l 4 -c 0-9a-f)-$(secretgen -x -l 4 -c 0-9a-f)-$(secretgen -x -l 12 -c 0-9a-f)"

=back

